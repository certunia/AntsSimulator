function Ant(x, y, sizeAnts , canvas) {
    const obj = {};
    obj.x = x;
    obj.y = y;
    obj.dx = 0;
    obj.dy = 0;

    obj.antSensitiveRadius = 30;

    // got a piece of food or not
    obj.hasFood  = false;

    // after home or food  is detected -> intensity is 1000
    obj.intensity = 0;

    // whether should an ant leave a point on the next step or not
    obj.leavePoint = 0;

    const ctx = canvas.getContext("2d");
    const ballRadius = sizeAnts;
    const time = 10;// how many iter'ations until it changes it's direction
    let iter = 0 ;// counter of iterations
    let angle = getRandomInt( 0 , 360 );
    const speed = 1.5;

    obj.play = function () {
        //redraw
        ctx.beginPath();
        ctx.arc(obj.x, obj.y, ballRadius, 0, Math.PI*2);
        // paint the ant depending on it's status
        if ( obj.hasFood ) {
            ctx.fillStyle = "#16b116";
        }
        else if ( obj.homePathIntensity > 0 ) {
            ctx.fillStyle = "#e12120";
        }
        else {
            ctx.fillStyle = "#0095DD";
        }
        ctx.fill();
        ctx.closePath();

        // if it did certain time of steps:
        if (iter === time) {
            iter = 0;

            // leave point
            if (obj.homePathIntensity > 0 || obj.foodPathIntensity > 0) {
                obj.leavePoint = true;
            }

            // there is a chance that it will change it's path
            const rand = Math.random();

            if ( rand < 0.25 ) {
                angle += 25;
            }
            else if ( rand > 0.75 ) {
                angle -= 25;
            }
        }


        //detection if it goes beyond canvas border
        if(obj.x + obj.dx < ballRadius) {
            obj.x = canvas.width-ballRadius-10;
        }
        else if(obj.x + obj.dx > canvas.width-ballRadius) {
            obj.x = ballRadius;
        }

        if(obj.y + obj.dy > canvas.height-ballRadius+2) {
            obj.y = ballRadius;
        }
        else if ( obj.y + obj.dy < ballRadius-2) {
            obj.y = canvas.height-ballRadius;
        }

        // calculate next coordinates depending on direction angle
        const radians = degrees_to_radians(angle);
        obj.x = speed * Math.cos(radians) + obj.x;
        obj.y = speed * Math.sin(radians) + obj.y;

        iter += 1;
    };

    function degrees_to_radians (degrees) {
        return degrees * ( Math.PI / 180 );
    }

    // checks if an ant inside some area or collide with something
    obj.checkCollision = function ( x, y, radius) {
        if ( obj.x < x + radius) { // right
            if ( obj.x > x - radius) { // left
                if ( obj.y < y + radius ) { // bottom
                    if ( obj.y > y - radius ) { // top
                        return true;
                    }
                }
            }
        }
        else {
            return false;
        }
    };

    obj.collisionWithHome = function () {
        obj.homePathIntensity = 1000;
        obj.foodPathIntensity = 0;
        obj.hasFood = false;
    }

    obj.collisionWithFood = function () {
        obj.homePathIntensity = 0;
        obj.foodPathIntensity = 1000;
        obj.hasFood = true;
    }

    return obj;
}



function Food(x, y, sizeFood, canvas) {
    const obj = {};

    obj.x = x;
    obj.y = y;

    const ctx = canvas.getContext("2d");

    obj.play = function () {
        ctx.beginPath();
        ctx.arc(obj.x, obj.y, sizeFood, 0, Math.PI * 2);
        ctx.fillStyle = "#0e6b0e";
        ctx.fill();
        ctx.closePath();
    }

    return obj;
}

function Ants() {
    const canvas = document.getElementById("myCanvas");
    const canvasH = canvas.height;
    const canvasW = canvas.width;
    const ctx = canvas.getContext("2d");
    const sizeAnts = 5;
    const sizeHome = 30;
    const sizeFood = 8;

    const howManyFood = 100;
    const food = [];

    const howManyAnts = 30;
    const ants = [];

    const pathToHome = Path("#e12120", canvas);
    const pathToFood = Path("#16b116", canvas);

    // create ants
    for (let i = 0; i < howManyAnts; i++) {
        const rx = getRandomInt( 10 , canvasW  - 10 ); // random x
        const ry = getRandomInt( 10 , canvasH - 10 ); // random y

        ants[i] = Ant( rx, ry, sizeAnts, canvas );
    }

    // create food
    for (let k = 0; k < howManyFood; k++) {
        food[k] = Food( 100, 100, sizeFood, canvas );

        // var rx = getRandomInt( 10 , canvasW  - 10 ); // random x
        // var ry = getRandomInt( 10 , canvasH - 10 ); // random y

        // food[k] = Food( rx, ry, sizeFood, canvas );
    }

    // make everything move
    setInterval(function () {
        // first we clear field
        ctx.clearRect(0, 0, canvasW, canvasH);

        //then we draw everything again
        ctx.beginPath();
        ctx.arc( canvasW/2 , canvasH/2 , sizeHome, 0, Math.PI*2);
        ctx.fillStyle = "#801716";
        ctx.fill();
        ctx.closePath();

        food.forEach(foodItem => {
            foodItem.play();
        })

        ants.forEach((ant) => {
            ant.play();

            if (ant.leavePoint) {
                ant.leavePoint = false;
                if (ant.hasFood) {
                    pathToFood.addPoint(ant.x, ant.y, ant.intensity);
                } else {
                    pathToHome.addPoint(ant.x, ant.y, ant.intensity);
                }
            }

            // home collision
            if ( ant.checkCollision( canvasW/2, canvasH/2, sizeHome ) ) {
                ant.collisionWithHome();
            }

            // food collision
            food.forEach(foodItem => {
                if ( ant.checkCollision( foodItem.x, foodItem.y, sizeFood ) ) {
                    ant.collisionWithFood();
                }
            })
        })
    },20);
}

function getRandomInt(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min; //Максимум и минимум включаются
}

window.addEventListener('DOMContentLoaded', Ants);



function Path(color, canvas) {
    const obj = {};

    const ctx = canvas.getContext("2d");

    obj.intensityFall = -1;

    obj.points = [];
    // point = {
    //     x: 0,
    //     y: 0,
    //     intensity: 0,
    // }

    obj.play = function () {
        obj.points.forEach((point) => {
            ctx.beginPath();
            ctx.arc(obj.x, obj.y, 1, 0, Math.PI * 2);
            ctx.fillStyle = color;
            ctx.fill();
            ctx.closePath();

            if (point.intensity < 0) {
                removePoint();
            }

            point.intensity -= obj.intensityFall;
        });
    }

    function removePoint() {

    }

    obj.addPoint = function (x, y, intensity) {
        obj.points.push({
            x,
            y,
            intensity
        });
    }

    return obj;
}
